import Web3 from 'web3';
import { NetworkConfig, SaddleConfig } from './config';
import { AbiItem } from 'web3-utils';
import { Contract, SendOptions } from 'web3-eth-contract';
import { TransactionReceipt } from 'web3-core';
import { TraceOptions } from './trace';
export interface Saddle {
    account: string;
    accounts: string[];
    wallet_accounts: string[];
    saddle_config: SaddleConfig;
    network_config: NetworkConfig;
    getContract: (contractName: string, sendOptions: SendOptions) => Promise<Contract>;
    getContractAt: (contractName: string, address: string) => Promise<Contract>;
    listContracts: (all?: boolean) => Promise<{
        [contract: string]: string | null;
    }>;
    deploy: (contract: string, args: any[], sendOptions: any) => Promise<Contract>;
    deployFull: (contract: string, args: any[], sendOptions: any, web3?: Web3 | undefined) => Promise<{
        contract: Contract;
        receipt: TransactionReceipt;
    }>;
    verify: (apiKey: string, address: string, contractName: string, contractArgs: (string | string[])[], optimizations: number) => Promise<void>;
    match: (address: string, contractName: string, contractArgs: string | any[]) => Promise<void>;
    abi: (contract: string) => Promise<AbiItem[]>;
    web3: Web3;
    send: (contract: Contract, method: string, args: any[], sendOptions?: SendOptions) => Promise<any>;
    call: (contract: Contract, method: string, args: any[], sendOptions?: SendOptions) => Promise<any>;
    trace: (receipt: TransactionReceipt, options: TraceOptions) => Promise<any>;
}
export declare function getSaddle(network: any, trace?: boolean, quiet?: boolean): Promise<Saddle>;
//# sourceMappingURL=saddle.d.ts.map