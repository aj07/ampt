"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GanacheSubprovider = void 0;
const ganache_core_1 = __importDefault(require("ganache-core"));
const subprovider_1 = require("@0x/subproviders/lib/src/subproviders/subprovider");
/**
 * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.
 * It intercepts all JSON RPC requests and relays them to an in-process ganache instance.
 */
class GanacheSubprovider extends subprovider_1.Subprovider {
    /**
     * Instantiates a GanacheSubprovider
     * @param opts The desired opts with which to instantiate the Ganache provider
     */
    constructor(opts) {
        super();
        this._ganacheProvider = ganache_core_1.default.provider(opts);
    }
    /**
     * This method conforms to the web3-provider-engine interface.
     * It is called internally by the ProviderEngine when it is this subproviders
     * turn to handle a JSON RPC request.
     * @param payload JSON RPC payload
     * @param _next Callback to call if this subprovider decides not to handle the request
     * @param end Callback to call if subprovider handled the request and wants to pass back the request.
     */
    // tslint:disable-next-line:prefer-function-over-method async-suffix
    async handleRequest(payload, _next, end) {
        this._ganacheProvider.sendAsync(payload, (err, result) => {
            end(err, result && result.result);
        });
    }
}
exports.GanacheSubprovider = GanacheSubprovider;
//# sourceMappingURL=ganache_subprovider.js.map