import Web3 from 'web3';
import { Contract, SendOptions } from 'web3-eth-contract';
import { TransactionReceipt } from 'web3-core';
import { AbiItem } from 'web3-utils';
import { SaddleConfig, NetworkConfig } from './config';
interface ContractBuild {
    path: string;
    version: string;
    abi: string;
    bin: string;
    sources: {
        string: {
            content: string;
            keccak256: string;
        };
    };
}
export declare function getBuildFile(saddle_config: SaddleConfig | NetworkConfig): string;
export declare function readBuildFile(saddle_config: SaddleConfig | NetworkConfig): Promise<object>;
export declare function getNetworkFile(network_config: NetworkConfig): string;
export declare function readNetworkFile(network_config: NetworkConfig): Promise<{
    [contract: string]: string | null;
}>;
export declare function writeNetworkFile(value: object, network_config: NetworkConfig): Promise<void>;
export declare function getContractBuild(name: string, saddle_config: SaddleConfig | NetworkConfig): Promise<ContractBuild>;
export declare function listContracts(network_config: NetworkConfig): Promise<{
    [contract: string]: string | null;
}>;
export declare function getContractABI(name: string, saddle_config: SaddleConfig | NetworkConfig): Promise<AbiItem[]>;
export declare function getContract(web3: Web3, name: string, saddle_config: SaddleConfig | NetworkConfig, defaultOptions: SendOptions): Promise<Contract>;
export declare function getContractAt(web3: Web3, name: string, saddle_config: SaddleConfig | NetworkConfig, address: string, defaultOptions: SendOptions): Promise<Contract>;
export declare function deployContract(web3: Web3, network: string, name: string, args: any[], network_config: NetworkConfig, defaultOptions: SendOptions, sendOptions: SendOptions): Promise<{
    contract: Contract;
    receipt: TransactionReceipt;
}>;
export declare function contractDeployInfo(web3: Web3, network: string, name: string, args: string | any[], network_config: NetworkConfig, defaultOptions: SendOptions, sendOptions: SendOptions): Promise<string>;
export declare function saveContract(name: string, contract: Contract, network_config: NetworkConfig): Promise<void>;
export declare function loadContractAddress(name: string, network_config: NetworkConfig): Promise<string | undefined>;
export {};
//# sourceMappingURL=contract.d.ts.map