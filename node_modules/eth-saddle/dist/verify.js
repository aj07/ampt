"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.etherscanVerify = void 0;
const contract_1 = require("./contract");
const web3_eth_abi_1 = __importDefault(require("web3-eth-abi"));
const logger_1 = require("./logger");
const etherscan_1 = require("./etherscan");
async function sleep(timeout) {
    return new Promise((resolve, _reject) => {
        setTimeout(() => resolve(), timeout);
    });
}
// From https://etherscan.io/contract-license-types
const licenses = {
    NO_LICENSE: 1,
    THE_UNLICENSE: 2,
    MIT: 3,
    GPLv2: 4,
    GPLv3: 5,
    LGLPv2_1: 6,
    LGPLv3: 7,
    BSD2: 8,
    BSD3: 9,
    MPL2: 10,
    OSL3: 11,
    APACHE2: 12
};
async function checkStatus(url, apiKey, token, verbose) {
    logger_1.info(`Checking status of ${token}...`, verbose);
    // Potential results:
    // { status: '0', message: 'NOTOK', result: 'Fail - Unable to verify' }
    // { status: '0', message: 'NOTOK', result: 'Pending in queue' }
    // { status: '1', message: 'OK', result: 'Pass - Verified' }
    let result = await etherscan_1.get(url, {
        apikey: apiKey,
        guid: token,
        module: "contract",
        action: "checkverifystatus"
    });
    logger_1.info(JSON.stringify(result), verbose);
    if (result.result === "Pending in queue") {
        await sleep(5000);
        return await checkStatus(url, apiKey, token, verbose);
    }
    if (result.result.startsWith('Fail')) {
        throw new Error(`Etherscan failed to verify contract: ${result.message} "${result.result}"`);
    }
    if (Number(result.status) !== 1) {
        throw new Error(`Etherscan Error: ${result.message} "${result.result}"`);
    }
    logger_1.info(`Verification result ${result.result}...`, verbose);
}
const importRegex = /^\s*import\s*\"([^\"]+)\"[\s;]*$/mig;
function getConstructorABI(abi, contractArgs) {
    const constructorAbi = abi.find((x) => x.type === 'constructor');
    if (!constructorAbi) {
        return "0x";
    }
    else {
        return web3_eth_abi_1.default.encodeParameters(constructorAbi.inputs, contractArgs);
    }
}
async function etherscanVerify(saddle_config, network, apiKey, address, contractName, contractArgs, verbose) {
    logger_1.info(`Verifying contract ${contractName} at ${address} with args ${JSON.stringify(contractArgs)}`, verbose);
    let contractBuild = await contract_1.getContractBuild(contractName, saddle_config);
    let metadata = JSON.parse(contractBuild.metadata);
    let compilerVersion = contractBuild.version.replace(/\+commit\.([0-9a-fA-F]+)\..*/gi, '+commit.$1');
    let constructorAbi = Array.isArray(contractArgs) ? getConstructorABI(JSON.parse(contractBuild.abi), contractArgs) : contractArgs;
    let url = etherscan_1.getEtherscanApiUrl(network);
    let language = metadata.language;
    let settings = metadata.settings;
    let sources = metadata.sources;
    let target = Object.entries(settings.compilationTarget)[0].join(':');
    delete settings.compilationTarget;
    const verifyData = {
        apikey: apiKey,
        module: 'contract',
        action: 'verifysourcecode',
        codeformat: 'solidity-standard-json-input',
        contractaddress: address,
        sourceCode: JSON.stringify({ language, settings, sources }),
        contractname: target,
        compilerversion: `v${compilerVersion}`,
        constructorArguements: constructorAbi.slice(2),
        licenseType: licenses.NO_LICENSE.toString()
    };
    logger_1.info(`Verifying ${contractName} at ${address} with compiler version ${compilerVersion}...`, verbose);
    logger_1.debug(`Etherscan API Request:\n\n${JSON.stringify(verifyData, undefined, 2)}`, verbose);
    logger_1.debug(metadata.sources, verbose);
    // Potential results
    // {"status":"0","message":"NOTOK","result":"Invalid constructor arguments provided. Please verify that they are in ABI-encoded format"}
    // {"status":"1","message":"OK","result":"usjpiyvmxtgwyee59wnycyiet7m3dba4ccdi6acdp8eddlzdde"}
    let result = await etherscan_1.post(url, verifyData);
    if (Number(result.status) === 0 || result.message !== "OK") {
        if (result.result.includes('Contract source code already verified')) {
            logger_1.warn(`Contract already verified`, verbose);
        }
        else {
            throw new Error(`Etherscan Error: ${result.message}: ${result.result}`);
        }
    }
    else {
        return await checkStatus(url, apiKey, result.result, verbose);
    }
}
exports.etherscanVerify = etherscanVerify;
//# sourceMappingURL=verify.js.map