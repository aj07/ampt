"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.instantiateConfig = exports.loadConfig = exports.Ganache = void 0;
const web3_1 = __importDefault(require("web3"));
const path_1 = __importDefault(require("path"));
const ganache_core_1 = __importDefault(require("ganache-core"));
const utils_1 = require("./utils");
const web3_provider_engine_1 = __importDefault(require("web3-provider-engine"));
const sol_coverage_1 = require("@compound-finance/sol-coverage");
const ganache_subprovider_1 = require("./ganache_subprovider");
const saddle_artifact_adapter_1 = require("./saddle_artifact_adapter");
const RpcSubprovider = require('web3-provider-engine/subproviders/rpc.js');
const fs = __importStar(require("fs"));
exports.Ganache = ganache_core_1.default;
async function loadConfig(file, trace) {
    let customJson = {};
    const configFile = file || path_1.default.join(process.cwd(), 'saddle.config.js');
    try {
        customJson = require(configFile);
    }
    catch (e) {
        if (fs.existsSync(configFile)) {
            throw new Error(`Cannot read saddle JSON: ${configFile}: ${e}`);
        }
    }
    const defaultJson = require(path_1.default.join(__dirname, '..', 'saddle.config.js'));
    const merged = utils_1.mergeDeep(defaultJson, customJson);
    return {
        ...merged,
        ...trace === true ? { trace } : {}
    };
}
exports.loadConfig = loadConfig;
async function fetchProvider(source) {
    function maybeProvider(source) {
        return source && source.length > 0 ? source.trim() : undefined;
    }
    if (!source) {
        return undefined;
    }
    else if ('ganache' in source) {
        return ganache_core_1.default.provider(source['ganache']);
    }
    else if ('env' in source) {
        return maybeProvider(process.env[source.env]);
    }
    else if ('file' in source) {
        try {
            return maybeProvider(await utils_1.readFile(source.file, 'utf8'));
        }
        catch (e) {
            return undefined;
        }
    }
    else if ('http' in source) {
        return maybeProvider(source.http);
    }
}
async function fetchAccount(source, web3) {
    if (!source) {
        return undefined;
    }
    else if ('unlocked' in source) {
        // We'll actually ping the provider ðŸ˜¬
        let accounts = await web3.eth.getAccounts();
        let index = Number(source.unlocked);
        return { default_account: accounts[index], wallet_accounts: [] };
    }
    else if ('env' in source) {
        let privateKey = process.env[source.env];
        if (privateKey) {
            let account = web3.eth.accounts.wallet.add(privateKey);
            return { default_account: account.address, wallet_accounts: [] };
        }
        else {
            return undefined;
        }
    }
    else if ('file' in source) {
        try {
            let privateKeys = (await utils_1.readFile(source.file, 'utf8')).split('\n');
            const wallet_accounts = privateKeys.filter(key => !!key.trim()).map((key) => {
                const wallet = web3.eth.accounts.wallet.add('0x' + key);
                return wallet.address;
            });
            return { default_account: wallet_accounts[0], wallet_accounts: wallet_accounts };
        }
        catch (e) {
            return undefined;
        }
    }
}
async function fetchNumeric(source) {
    if (!source) {
        return undefined;
    }
    else if ('default' in source) {
        return utils_1.tryNumber(source.default);
    }
    else if ('env' in source) {
        return utils_1.tryNumber(process.env[source.env]);
    }
}
async function fetchWeb3(providers, accountSource, web3Config, artifactAdapter, config) {
    let provider = await findValidConfig(providers, fetchProvider);
    let gas = await findValidConfig(web3Config.gas, fetchNumeric);
    let gasPrice = await findValidConfig(web3Config.gas_price, fetchNumeric);
    let web3, coverageSubprovider, providerEngine;
    // XXXS TODO: make this nicer, obviously
    if (config.trace && artifactAdapter) {
        let ganacheConfig = providers.reduce((config, el) => {
            if (el['ganache']) {
                return el['ganache'];
            }
            else {
                return config;
            }
        }, {});
        coverageSubprovider = new sol_coverage_1.CoverageSubprovider(artifactAdapter, '0x');
        const blockTracker = {
            on: () => null,
            removeAllListeners: () => null,
        };
        providerEngine = new web3_provider_engine_1.default({ blockTracker: blockTracker });
        providerEngine.send = providerEngine.sendAsync;
        web3 = new web3_1.default(providerEngine);
        providerEngine.addProvider(coverageSubprovider);
        providerEngine.addProvider(new ganache_subprovider_1.GanacheSubprovider(ganacheConfig)); // TODO: Pass args?
        providerEngine.start();
    }
    else {
        web3 = new web3_1.default(provider);
    }
    let { default_account, wallet_accounts } = await findValidConfig(accountSource, async (el) => {
        return fetchAccount(el, web3);
    });
    let defaultOptions = {
        ...web3Config.options,
        gas,
        gasPrice,
        from: default_account
    };
    return { default_account, wallet_accounts, web3, defaultOptions, cov: coverageSubprovider, providerEngine };
}
async function findValidConfig(options, fetcher) {
    let validOption = await utils_1.arr(options).reduce(async (acc, el) => await acc ? await acc : await fetcher(el), Promise.resolve(undefined));
    if (!validOption) {
        throw new Error(`missing valid config from ${JSON.stringify(options)}`);
    }
    return validOption;
}
async function instantiateConfig(config, network) {
    let networkConfig = config.networks[network];
    if (!networkConfig) {
        throw new Error(`missing network ${network} in config`);
    }
    let artifactAdapter;
    if (config.trace) {
        artifactAdapter = new saddle_artifact_adapter_1.SaddleArtifactAdapter(config.build_dir, 'contracts-trace.json', config.coverage_ignore);
    }
    const { default_account, wallet_accounts, web3, defaultOptions, cov, providerEngine } = await fetchWeb3(utils_1.arr(networkConfig.providers), utils_1.arr(networkConfig.accounts), networkConfig.web3, artifactAdapter, config);
    return {
        solc: config.solc,
        solc_args: config.solc_args,
        solc_shell_args: config.solc_shell_args,
        build_dir: config.build_dir,
        extra_build_files: config.extra_build_files,
        coverage_dir: config.coverage_dir,
        coverage_ignore: config.coverage_ignore,
        contracts: config.contracts,
        tests: config.tests,
        network: network,
        trace: config.trace,
        get_build_file: config.get_build_file,
        read_build_file: config.read_build_file,
        get_network_file: config.get_network_file,
        read_network_file: config.read_network_file,
        write_network_file: config.write_network_file,
        web3,
        default_account,
        wallet_accounts,
        defaultOptions,
        cov,
        providerEngine,
        artifactAdapter
    };
}
exports.instantiateConfig = instantiateConfig;
//# sourceMappingURL=config.js.map