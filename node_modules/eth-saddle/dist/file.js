"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeFile = exports.readFile = exports.mkdirp = void 0;
const fs = __importStar(require("fs"));
async function mkdirp(file) {
    return new Promise((resolve, reject) => {
        fs.mkdir(file, { recursive: true }, (err) => {
            if (err && err.code != 'EEXIST')
                return reject(err);
            return resolve();
        });
    });
}
exports.mkdirp = mkdirp;
async function readFile(file, def, fn) {
    return new Promise((resolve, reject) => {
        fs.access(file, fs.constants.F_OK, (err) => {
            if (err) {
                resolve(def);
            }
            else {
                fs.readFile(file, 'utf8', (err, data) => {
                    return err ? reject(err) : resolve(fn(data));
                });
            }
        });
    });
}
exports.readFile = readFile;
async function writeFile(file, data) {
    return new Promise((resolve, reject) => {
        fs.writeFile(file, data, (err) => {
            return err ? reject(err) : resolve();
        });
    });
}
exports.writeFile = writeFile;
//# sourceMappingURL=file.js.map