"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = __importDefault(require("request"));
function getEtherscanApiUrl(network) {
    let host = {
        kovan: 'api-kovan.etherscan.io',
        rinkeby: 'api-rinkeby.etherscan.io',
        ropsten: 'api-ropsten.etherscan.io',
        goerli: 'api-goerli.etherscan.io',
        mainnet: 'api.etherscan.io'
    }[network];
    if (!host) {
        throw new Error(`Unknown etherscan API host for network ${network}`);
    }
    return `https://${host}/api`;
}
exports.getEtherscanApiUrl = getEtherscanApiUrl;
function getEtherscanUrl(network) {
    let host = {
        kovan: 'kovan.etherscan.io',
        rinkeby: 'rinkeby.etherscan.io',
        ropsten: 'ropsten.etherscan.io',
        goerli: 'goerli.etherscan.io',
        mainnet: 'etherscan.io'
    }[network];
    if (!host) {
        throw new Error(`Unknown etherscan host for network ${network}`);
    }
    return `https://${host}`;
}
exports.getEtherscanUrl = getEtherscanUrl;
function post(url, data) {
    return new Promise((resolve, reject) => {
        request_1.default.post(url, { form: data }, (err, httpResponse, body) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(JSON.parse(body));
            }
        });
    });
}
exports.post = post;
function get(url, data, parser = JSON.parse) {
    return new Promise((resolve, reject) => {
        request_1.default.get(url, { form: data }, (err, httpResponse, body) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(parser ? parser(body) : body);
            }
        });
    });
}
exports.get = get;
//# sourceMappingURL=etherscan.js.map