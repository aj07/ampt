"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compile = void 0;
const path = __importStar(require("path"));
const util_1 = require("util");
const child_process_1 = require("child_process");
const config_1 = require("../../config");
const file_1 = require("../../file");
const contract_1 = require("../../contract");
const logger_1 = require("../../logger");
async function compile(trace, verbose, pretty) {
    let config = await config_1.loadConfig(undefined, trace);
    let outFile = contract_1.getBuildFile(config);
    let outDir = path.basename(config.build_dir);
    let solc;
    if (trace || config.trace) {
        solc = `${config.solc} --combined-json bin,bin-runtime,abi,metadata,asm,srcmap,srcmap-runtime --metadata-literal --optimize ${config.solc_args.join(" ")} ${config.contracts}`;
    }
    else {
        solc = `${config.solc} --combined-json bin,abi,metadata --metadata-literal --optimize ${config.solc_args.join(" ")} ${config.contracts}`;
    }
    logger_1.info(`Compiling contracts ${config.contracts} with ${config.solc} to ${outFile}...`, verbose);
    logger_1.debug(`Running \`${solc}\``, verbose);
    await file_1.mkdirp(outDir);
    const { stdout, stderr } = await util_1.promisify(child_process_1.exec)(solc, config.solc_shell_args);
    if (stderr) {
        logger_1.error(stderr, verbose);
    }
    let formattedOut = pretty ? JSON.stringify(JSON.parse(stdout), null, 2) : stdout;
    await file_1.writeFile(outFile, formattedOut);
    logger_1.info(`Contracts compiled successfully.`, verbose);
}
exports.compile = compile;
//# sourceMappingURL=compile.js.map