"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runScript = void 0;
const vm_1 = __importDefault(require("vm"));
const path_1 = __importDefault(require("path"));
const file_1 = require("../../file");
const saddle_1 = require("../../saddle");
const console_1 = require("./console");
const logger_1 = require("../../logger");
const utils_1 = require("../../utils");
async function runScript(network, script, scriptArgs, verbose) {
    let saddle = await saddle_1.getSaddle(network);
    let contracts = await saddle.listContracts(true);
    let { contractInsts } = await console_1.getContracts(saddle);
    let contractAddresses = Object.fromEntries(Object.entries(contracts).map(([contract, address]) => {
        return [`$${contract}`, address];
    }));
    logger_1.info(`Running script ${script} on network ${network} ${utils_1.describeProvider(saddle.web3.currentProvider)} with args ${JSON.stringify(scriptArgs)}`, verbose);
    let scriptFile = saddle.saddle_config.scripts[script] || script;
    const scriptContents = await file_1.readFile(scriptFile, null, (x) => x.toString());
    if (!scriptContents) {
        throw new Error(`Script not found: ${scriptFile}`);
    }
    let scriptDir = path_1.default.resolve(path_1.default.dirname(scriptFile));
    let vmRequire = (p) => {
        // Fix relative path imports
        if (p.slice(0, 1) === '.') {
            let fullPath = path_1.default.resolve(__dirname, path_1.default.relative(__dirname, scriptDir), p);
            return require(fullPath);
        }
        else {
            return require(p);
        }
    };
    const context = {
        saddle,
        ...saddle,
        ...contractInsts,
        addresses: contracts,
        ...contractAddresses,
        console,
        network,
        args: scriptArgs,
        env: process.env,
        setTimeout,
        require: vmRequire,
        __dirname: scriptDir
    };
    const vmScript = new vm_1.default.Script(scriptContents);
    vm_1.default.createContext(context);
    let start = +new Date();
    let result = await vmScript.runInContext(context);
    let end = +new Date();
    logger_1.info(`Script finished in ${end - start}ms.`, verbose);
    if (result) {
        logger_1.debug("Script Result:", verbose);
        logger_1.debug(result, verbose);
    }
    return result;
}
exports.runScript = runScript;
//# sourceMappingURL=script.js.map