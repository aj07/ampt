"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaddleArtifactAdapter = void 0;
// import { FallthroughResolver, FSResolver, NPMResolver, RelativeFSResolver, URLResolver } from '@0x/sol-resolver';
// import { logUtils } from '@0x/utils';
// import { CompilerOptions, ContractArtifact } from 'ethereum-types';
const fs = __importStar(require("fs"));
// import * as glob from 'glob';
// import * as _ from 'lodash';
// import * as path from 'path';
const util_1 = require("util");
// import { ContractData, SourceCodes, Sources } from '../types';
const sol_coverage_1 = require("@compound-finance/sol-coverage");
// const CONFIG_FILE = 'compiler.json';
class SaddleArtifactAdapter extends sol_coverage_1.AbstractArtifactAdapter {
    // private readonly _sourcesPath: string;
    // private readonly _resolver: FallthroughResolver;
    /**
     * Instantiates a SolCompilerArtifactAdapter
     * @param artifactsPath Path to your artifacts directory
     * @param sourcesPath Path to your contract sources directory
     */
    constructor(buildDir, contractsFile, coverageIgnore) {
        super();
        this._buildDir = buildDir;
        this._contractsFile = contractsFile;
        this._coverageIgnore = coverageIgnore;
    }
    async collectContractsDataAsync() {
        const contractsFile = `${this._buildDir}/${this._contractsFile}`;
        const json = JSON.parse(await util_1.promisify(fs.readFile)(contractsFile, 'utf8'));
        const contracts = json['contracts'];
        const sourceList = json['sourceList'];
        const sourceIndex = sourceList.reduce((acc, el, i) => ({ ...acc, [el]: i }), {});
        return Object.entries(contracts).reduce((res, [contractName, contract]) => {
            let metadata = JSON.parse(contract['metadata']);
            let [sources, sourceCodes] = Object.entries(metadata['sources']).reduce(([sources, sourceCodes], [path, source]) => {
                let i = sourceIndex[path];
                return [
                    {
                        ...sources,
                        [i]: path
                    },
                    {
                        ...sourceCodes,
                        [i]: source['content']
                    }
                ];
            }, [{}, {}]);
            const contractData = {
                name: contractName.split(':')[0],
                sourceCodes,
                sources,
                bytecode: '0x' + contract['bin'],
                sourceMap: contract['srcmap'],
                runtimeBytecode: '0x' + contract['bin-runtime'],
                sourceMapRuntime: contract['srcmap-runtime'],
            };
            const isInterfaceContract = contractData.bytecode === '0x' && contractData.runtimeBytecode === '0x';
            const isIgnored = this._coverageIgnore.includes(contractData.name);
            if (isInterfaceContract || isIgnored) {
                return res;
            }
            else {
                return [
                    ...res,
                    contractData
                ];
            }
        }, []);
    }
}
exports.SaddleArtifactAdapter = SaddleArtifactAdapter;
//# sourceMappingURL=saddle_artifact_adapter.js.map