"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidJSONString = exports.describeProvider = exports.readFile = exports.resolvePath = exports.tryNumber = exports.mergeDeep = exports.arr = void 0;
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
function arr(v) {
    if (!v) {
        return [];
    }
    else if (Array.isArray(v)) {
        return v;
    }
    else {
        return [v];
    }
}
exports.arr = arr;
function mergeDeep(target, source) {
    const isObject = (obj) => obj && typeof obj === 'object';
    if (!isObject(target) || !isObject(source)) {
        return source;
    }
    Object.keys(source).forEach(key => {
        const targetValue = target[key];
        const sourceValue = source[key];
        if (Array.isArray(targetValue) && Array.isArray(sourceValue)) {
            target[key] = sourceValue; // Always use source key, if given
        }
        else if (isObject(targetValue) && isObject(sourceValue)) {
            target[key] = mergeDeep(Object.assign({}, targetValue), sourceValue);
        }
        else {
            target[key] = sourceValue;
        }
    });
    return target;
}
exports.mergeDeep = mergeDeep;
function tryNumber(n) {
    if (n === undefined) {
        return undefined;
    }
    let x = Number(n);
    if (isNaN(x)) {
        return undefined;
    }
    else {
        return x;
    }
}
exports.tryNumber = tryNumber;
function resolvePath(path, home = os_1.default.homedir()) {
    if (home)
        return path.replace(/^~(?=$|\/|\\)/, home);
    return path;
}
exports.resolvePath = resolvePath;
async function readFile(path, options) {
    return new Promise((okay, fail) => {
        fs_1.default.readFile(resolvePath(path), options, (err, data) => {
            if (err)
                return fail(err);
            if (data instanceof Buffer)
                return okay(data.toString());
            return okay(data);
        });
    });
}
exports.readFile = readFile;
function describeProvider(provider) {
    if (!provider) {
        return "no provider";
    }
    else if (provider && provider.hasOwnProperty('host')) {
        return provider['host'];
    }
    else {
        return provider.engine ? provider.engine.constructor.name : 'unknown provider';
    }
}
exports.describeProvider = describeProvider;
function isValidJSONString(str) {
    try {
        let res = JSON.parse(str);
        return typeof (res) !== 'number';
    }
    catch (e) {
        return false;
    }
    return true;
}
exports.isValidJSONString = isValidJSONString;
//# sourceMappingURL=utils.js.map