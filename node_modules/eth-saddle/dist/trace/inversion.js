"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addInv = exports.showInv = void 0;
const utils_1 = require("./utils");
let seen = {};
function showInv(inv, key) {
    if (key.length > 64) {
        let res = utils_1.chunk(key, 64).map((chk) => {
            return doShowInv(inv, chk);
        });
        return `CONCAT(${res.join(',')})`;
    }
    else {
        return doShowInv(inv, key);
    }
}
exports.showInv = showInv;
function doShowInv(inv, key) {
    let res;
    if (seen[key]) {
        return seen[key];
    }
    else if (parseInt(key, 16) < 10000) { // ignore small numbers
        res = `0x${utils_1.trimZero(key)}`;
    }
    else if (inv[key] && inv[key][0]) {
        // For now, we'll just use the first if we have multiple
        // This is probably good since it's when the value first arrived
        const el = inv[key][0];
        if (el.inputs.length > 0) {
            const inputs = el.inputs.map((input) => showInv(inv, input));
            res = `${el.operation}(${inputs.join(',')})`;
        }
        else {
            return el.operation;
        }
    }
    else {
        res = `0x${utils_1.trimZero(key)}`;
    }
    seen[key] = res;
    return res;
}
function addInv(inv, op, inputs, outputs) {
    return outputs.reduce((inv, output) => {
        let curr = inv[output] || [];
        return {
            ...inv,
            [output]: [
                ...curr,
                {
                    operation: op,
                    inputs: inputs
                }
            ]
        };
    }, inv);
}
exports.addInv = addInv;
//# sourceMappingURL=inversion.js.map