import Web3 from 'web3';
import { SendOptions } from 'web3-eth-contract';
import ProviderEngine from 'web3-provider-engine';
import { CoverageSubprovider } from '@compound-finance/sol-coverage';
import { SaddleArtifactAdapter } from './saddle_artifact_adapter';
declare type NumericSource = {
    env: string;
} | {
    default: string;
};
declare type ProviderSource = {
    env: string;
} | {
    file: string;
} | {
    http: string;
} | {
    ganache: object;
};
declare type AccountSource = {
    env: string;
} | {
    file: string;
} | {
    unlocked: number;
};
export declare const Ganache: any;
export interface SaddleWeb3Config {
    gas: NumericSource | NumericSource[];
    gas_price: NumericSource | NumericSource[];
    options: SendOptions;
}
export interface AccountConfig {
    default_account: string;
    wallet_accounts: string[];
}
export interface SaddleNetworkConfig {
    providers: ProviderSource | ProviderSource[];
    web3: SaddleWeb3Config;
    accounts: AccountSource | AccountSource[];
}
export interface SaddleConfig {
    solc: string;
    solc_args: string[];
    solc_shell_args: object;
    build_dir: string;
    extra_build_files: string[];
    coverage_dir: string;
    coverage_ignore: string[];
    contracts: string;
    tests: string[];
    networks: {
        [network: string]: SaddleNetworkConfig;
    };
    scripts: {
        [name: string]: string;
    };
    trace: boolean;
    get_build_file?: () => string;
    read_build_file?: () => Promise<object>;
    get_network_file?: (string: any) => string;
    read_network_file?: (string: any) => Promise<object>;
    write_network_file?: (string: any, object: any) => Promise<void>;
}
export interface Web3Config {
    gas: number;
    gas_price: number;
    options: object;
}
export interface NetworkConfig {
    solc: string;
    solc_args: string[];
    solc_shell_args: object;
    build_dir: string;
    extra_build_files: string[];
    coverage_dir: string;
    coverage_ignore: string[];
    contracts: string;
    tests: string[];
    network: string;
    trace: boolean;
    get_build_file?: () => string;
    read_build_file?: () => Promise<object>;
    get_network_file?: (string: any) => string;
    read_network_file?: (string: any) => Promise<object>;
    write_network_file?: (string: any, object: any) => Promise<void>;
    web3: Web3;
    default_account: string;
    wallet_accounts: string[];
    defaultOptions: SendOptions;
    cov: CoverageSubprovider | undefined;
    providerEngine: ProviderEngine | undefined;
    artifactAdapter: SaddleArtifactAdapter | undefined;
}
export declare function loadConfig(file?: string, trace?: boolean): Promise<SaddleConfig>;
export declare function instantiateConfig(config: SaddleConfig, network: string): Promise<NetworkConfig>;
export {};
//# sourceMappingURL=config.d.ts.map